package main

import (
	"crypto/rsa"
	"math/big"
	"reflect"
	"testing"
)

func TestParsePubkey(t *testing.T) {
	pubkeyString := "010001:DB1E3A8360F35CD741C7E73B0ABBA94BDCB2F8E2210EA01048FD0E5258895B65B4CA7F957E172F8B6E8EEDAD1D6BFCCC237A3E1B2936AF60C5F63981CD2057DDBAE2DEF024F7860D7F38D297E46A59DDF9C37D854E679F963E9EA348AF6A9D578F853908AEB741AE8B1D5D1162288C5A850CA0FF8DC2A167B6EFD1596F595B01"

	modulusInt := new(big.Int)
	modulusInt.SetString("DB1E3A8360F35CD741C7E73B0ABBA94BDCB2F8E2210EA01048FD0E5258895B65B4CA7F957E172F8B6E8EEDAD1D6BFCCC237A3E1B2936AF60C5F63981CD2057DDBAE2DEF024F7860D7F38D297E46A59DDF9C37D854E679F963E9EA348AF6A9D578F853908AEB741AE8B1D5D1162288C5A850CA0FF8DC2A167B6EFD1596F595B01", 16)
	p1 := &rsa.PublicKey{N: modulusInt, E: 0x10001}
	p2, err := parsePubkey(pubkeyString)
	if err != nil {
		t.Error(err)
	}
	if !reflect.DeepEqual(p1, p2) {
		t.Errorf("%#v and %#v is not same", p1, p2)
	}
}
